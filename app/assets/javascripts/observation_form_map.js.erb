// Observation Form Map - Lat/Long/Alt Helper
/* globals $, google */

var GMAPS_API_SCRIPT = "https://maps.googleapis.com/maps/api/js?key=" +
                       "<%= GM::GMap.key %>";

// ./observer/create_observation
$(document).ready(function() {
  var opened = false;

  var open_map = function(focus_immediately) {
    opened = true;

    $('#observationFormMap').removeClass("hidden").css({
      "background-position": "center center",
      "background-image": "url('<%= asset_path('indicator.gif') %>')",
      "background-repeat": "no-repeat"
    });
    $('.map-clear').removeClass("hidden");
    $('.map-open').hide();

    $.getScript(GMAPS_API_SCRIPT, function() {
      var searchInput = $('#observation_place_name'),
          latInput    = $('#observation_lat'),
          lngInput    = $('#observation_long'),
          elvInput    = $('#observation_alt'),
          marker;

      // init map
      var map_div = document.getElementById('observationFormMap');
      var map = new google.maps.Map(map_div, {
        center: { lat: -7, lng: -47 },
        zoom: 1
      });

      // init elevation service
      var elevation = new google.maps.ElevationService();

      // init geocoding service
      var geocoder = new google.maps.Geocoder();

      // Have the submit buttons wait until geocoder returns.
      var wait_for_geocoder = 0;
      $('form[name="observation_form"]').submit(function (e) {
        var _this = $(this);
        if (wait_for_geocoder <= 0) return;
        wait_for_geocoder--;
        e.preventDefault();
        _this.find(':input[type="submit"]').prop("disabled", true);
        window.setTimeout(function() {
          _this.submit();
        }, 1000);
      });

      addGmapsListener(map, 'click');

      // adjust marker on field input
      $([latInput, lngInput]).each(function() {
        var location;
        $(this).keyup(function() {
          location = {
            lat: parseFloat($(latInput).val()),
            lng: parseFloat($(lngInput).val())
          };
          placeMarker(location);
        });
      });

      // check if `Lat` & `Lng` fields are populated on load if so, drop a
      // pin on that location and center otherwise, check if a `Where` field
      // has been prepopulated and use that to focus map 
      if ($(latInput) !== '' && $(lngInput).val() !== '') {
        var location = {
          lat: parseFloat($(latInput).val()),
          lng: parseFloat($(lngInput).val())
        };
        placeMarker(location);
        map.setCenter(location);
        map.setZoom(8);
      } else if ($(searchInput).val() !== '') {
        focusMap();
      }

      // set bounds on map
      $('.map-locate').click(function() {
        focusMap();
      });

      // clear map button
      $('.map-clear').click(function(){
        clearMap();
      });

      // use the geocoder to focus on a specific region on the map
      function focusMap() {

        // even a single letter will return a result
        if ( $(searchInput).val().length <= 0 ) {
          return false;
        }

        geocoder.geocode({
          'address': $(searchInput).val()
        }, function(results, status) {
          if (status === google.maps.GeocoderStatus.OK && results.length > 0) {
            if (results[0].geometry.viewport) {
              map.fitBounds(results[0].geometry.viewport);
            }
          }
        });
      }

      // updates or creates a marker at a specific location
      function placeMarker(location) {
        if (marker) {
          marker.setPosition(location);
          marker.setVisible(true);
        } else {
          marker = new google.maps.Marker({
            draggable: true,
            map: map,
            position: location,
            visible: true
          });
          addGmapsListener(marker, 'drag');
        }
      }

      // updates lat & lng + elevaton fields
      function updateFields() {
        var requestElevation = {
          'locations': [marker.getPosition()]
        };

        $(latInput).val(marker.position.lat());
        $(lngInput).val(marker.position.lng());

        elevation.getElevationForLocations(requestElevation,
                                           function(results, status) {
          if (status === google.maps.ElevationStatus.OK) {
            if (results[0]) {
              $(elvInput).val(parseFloat(results[0].elevation));
            } else {
              $(elvInput).val('');
            }
          }
        });

        geocoder.geocode({
          'location': marker.position
        }, function(results, status) {
          var country, level1, level2, level3, locality, park, feature, route;
          var all = "";
          if (status === google.maps.GeocoderStatus.OK && results.length > 0) {
            for (var i=0; i<results.length; i++) {
              var addrs = results[i].address_components;
              for (var j=0; j<addrs.length; j++) {
                var types = addrs[j].types;
                for (var k=0; k<types.length; k++) {
                  all += types[k] + " = " + addrs[j].long_name + "\n";
                  if (types[k] == "country")
                    country ||= addrs[j].long_name;
                  else if (types[k] == "administrative_area_level_1")
                    level1 ||= addrs[j].long_name;
                  else if (types[k] == "administrative_area_level_2")
                    level2 ||= addrs[j].long_name;
                  else if (types[k] == "administrative_area_level_3")
                    level3 ||= addrs[j].long_name;
                  else if (types[k] == "locality")
                    locality ||= addrs[j].long_name;
                  else if (types[k] == "park")
                    park ||= addrs[j].long_name;
                  else if (types[k] == "natural_feature")
                    feature ||= addrs[j].long_name;
                  else if (types[k] == "point_of_interest")
                    feature ||= addrs[j].long_name;
                  else if (types[k] == "route")
                    route ||= addrs[j].long_name;
                }
              }
            }
            var city = "";
            if (park || feature) {
              city = "";
              if (park) city = park + ", " + city;
              if (feature) city = feature + ", " + city;
            } else if (level3) {
              city = level3;
            } else if (locality) {
              city = locality;
            }
            // if (route) city = route + ", " + city;
            if (city) city = city.replace(/, $/, "");
            if (level2) level2 = level2.replace(/ County$/, " Co.");
            $("#country").val(country || "");
            $("#state").val(level1 || "");
            $("#county").val(level2 || "");
            $("#city").val(city || "");
          }
          wait_for_geocoder = 0;
        });

        // Tell submit buttons to wait up to 10 seconds for geocoder to return.
        wait_for_geocoder = 10;
      }

      function clearMap() {
        $(latInput).val('');
        $(lngInput).val('');
        $(elvInput).val('');
        marker.setVisible(false);
      }

      function addGmapsListener(el, eventType) {
        google.maps.event.addListener(el, eventType, function(e) {
          placeMarker(e.latLng);
          updateFields();
        });
      }

      if (focus_immediately) {
        focusMap();
      }
    });
  };

  $('.map-open').click(function() {
    if (!opened) open_map();
  });

  $('.map-locate').click(function() {
    if (!opened) open_map("focus_immediately");
  });
});
